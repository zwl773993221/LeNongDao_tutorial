--- drivers/usb/serial/option.c
+++ drivers/usb/serial/option.c
@@ -658,6 +658,7 @@ static const struct usb_device_id option_ids[] = {
 	{ USB_DEVICE(0x2C7C, 0x0306) }, /* Quectel EG06/EP06/EM06 */
 	{ USB_DEVICE(0x2C7C, 0x0296) }, /* Quectel BG96 */
 	{ USB_DEVICE(0x2C7C, 0x0435) }, /* Quectel AG35 */
+	{ USB_DEVICE(0x2C7C, 0x6026) }, /* Quectel EC200T */
 #endif
 	{ USB_DEVICE(0x1286, 0x4e3d) }, /* Air72x */
 	{ USB_DEVICE(ZTE_VENDOR_ID, ZTE_PRODUCT_MZ382) },
@@ -1936,6 +1937,21 @@ static int option_probe(struct usb_serial *serial,
 	if (iface_desc->bInterfaceClass == 0x08)
 		return -ENODEV;
 
+#if 1 //Added by Quectel
+
+	//Quectel EC25&EC21 's interface 4 can be used as USB Network device
+	if (serial->dev->descriptor.idVendor == cpu_to_le16(0x2C7C) && serial->dev->descriptor.idProduct != cpu_to_le16(0x6026)
+				&& serial->interface->cur_altsetting->desc.bInterfaceNumber>= 4) {
+			return -ENODEV;
+	}
+
+	if (serial->dev->descriptor.idVendor == cpu_to_le16(0x2C7C) && serial->dev->descriptor.idProduct == cpu_to_le16(0x6026)
+			&& serial->interface->cur_altsetting->desc.bInterfaceNumber<= 1) {
+		return -ENODEV;
+	}
+
+#endif
+
 	/*
 	 * Don't bind reserved interfaces (like network ones) which often have
 	 * the same class/subclass/protocol as the serial interfaces.  Look at
